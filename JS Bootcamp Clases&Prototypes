// PROTOTYPES ****************************************************//

// /**
//  * CHALLENGE 7-2
//  *
//  * Fix all mistakes in the code below
//  */

// function Product(props) {
//   this.price = props.price;
//   };

// Product.prototype.priceInfo = function() {
//   console.log(`Price of the product is ${this.price}`);
// };


// function ElectricDevice(props) {
//   Product.call(this, props);
//   this.energyEfficiencyClass = props.energyEfficiencyClass;
// }

// ElectricDevice.prototype = Object.create(Product.prototype);

// ElectricDevice.prototype.constructor= ElectricDevice;

// ElectricDevice.prototype.energyInfo = function() {
//   console.log(
//     `Energy Efficiency Class is ${
//       this.energyEfficiencyClass
//     }`
//   );
// };

// function TV(props) {
//   ElectricDevice.call(this, props);
//   this.model = props.model;
//   this.diagonal = props.diagonal;
// }

// TV.prototype = Object.create(ElectricDevice.prototype);

// TV.prototype.constructor = TV;

// const propsForMyTv = {
//   model: "A1620",
//   price: 1200,
//   energyEfficiencyClass: "A+",
//   diagonal: 42
// };

// const myTV = new TV(propsForMyTv);

// /**
//  * VERIFICATION
//  */
// console.log(myTV);
// /* {
//   model: "A1620",
//   price: 1200,
//   energyEfficiencyClass: "A+",
//   diagonal: 42,
//   __proto__: ...
// } */

// myTV.energyInfo(); // "Energy Efficiency Class is A+"

// myTV.priceInfo(); // Price of the product is 1200

// myTV instanceof TV; // true
// myTV instanceof ElectricDevice; // true
// myTV instanceof Product; // true
// myTV instanceof Object; // true

// /**
//  * CHALLENGE 7-1
//  *
//  * Insert new prototype "Vehicle.prototype" to the existing prototype chain
//  *
//  * CURRENT CHAIN
//  * CivilPlane.prototype > Airplane.prototype
//  * > Object.protoype
//  *
//  * UPDATED CHAIN
//  * CivilPlane.prototype > Airplane.prototype
//  * > Vehicle.prototype > Object.protoype
//  *
//  * Vehicle.prototype should set two additional
//  * properties:
//  * 1. maxSpeed
//  * 2. weight
//  *
//  * It should also contain method "vehicleInfo"
//  * available for any object down the prototype chain
//  */

// // function Vehicle(props) {
// //   this.maxSpeed = props.maxSpeed;
// //   this.weight = props.weight;
// // }

// // Vehicle.prototype.vehicleInfo = function() {console.log(`Max speed of the vehicleis ${this.maxSpeed} and weight is ${this.weight}`);
// // };

// // function Airplane(props) {
// //   Vehicle.call(this, props);
// //   this.wingspan = props.wingspan;
// //   this.maxRangeOfFlight = props.maxRangeOfFlight;
// // }

// // Airplane.prototype = Object.create(Vehicle.prototype);

// // Airplane.prototype.constructor = Airplane;

// // Airplane.prototype.airplaneInfo = function() {console.log(`Wingspan of the airplane is ${this.wingspan} and maximal range of flight is ${this.maxRangeOfFlight}`);
// // };

// // function CivilPlane(props) {
// //   Airplane.call(this, props);
// //   this.numberOfSeats = props.numberOfSeats;
// // }

// // CivilPlane.prototype = Object.create(Airplane.prototype);

// // CivilPlane.prototype.constructor = CivilPlane;

// // CivilPlane.prototype.seatsInfo = function() {console.log(this); // instance of the prototype
// //   console.log(`Number of seats in the plane is ${this.numberOfSeats}`
// //   );
// // };

// // CivilPlane.prototype.modifySeatsNumber = function(newSeatsQty) {this.numberOfSeats = newSeatsQty;};

// // const propsForSmallPlane = {
// //   numberOfSeats: 4,
// //   wingspan: 20,
// //   maxRangeOfFlight: 1000,
// //   maxSpeed: 800,
// //   weight: 15
// // };

// // const smallPlane = new CivilPlane(propsForSmallPlane);

// // const propsForLargePlane = {
// //   numberOfSeats: 250,
// //   wingspan: 60,
// //   maxRangeOfFlight: 3500,
// //   maxSpeed: 900,
// //   weight: 40
// // };

// // const largePlane = new CivilPlane(propsForLargePlane);

// // /**
// //  * VERIFICATION
// //  */
// // smallPlane.vehicleInfo(); // Max speed of the vehicle is 800 and weight is 15

// // largePlane.vehicleInfo(); // Max speed of the vehicle is 900 and weight is 40


// // // function CivilPlane() {

// // // };

// // // console.log(CivilPlane.prototype); //{constructor: ƒ}constructor: ƒ CivilPlane()__proto__: Object
// // // console.log(CivilPlane.prototype.constructor === CivilPlane); 
// // // console.log(CivilPlane.prototype.__proto__ == Object.prototype);
// // /**EX2 - create new instance of prototype using new syntax 
// //  * 1. Function constructor called
// //  * 2. New obiejct is created
// //  * 3. proto is added
// //  * 4. new props are added 
// //  * 5. object is returned by constructior function
// //  */
// // // function CivilPlane(props) {
// // //   console.log(this); //
// // //   console.log(this.__proto__);
// // //   console.log(this.__proto__.__proto__);
// // //   this.numberOfSeats = props.numberOfSeats;
// // //   console.log(this);
// // // };
// // // const propsForSmallPLane = { numberOfSeats: 4 };
// // // const smallPlane = new CivilPlane(propsForSmallPLane);
// // // console.log(smallPlane);

// // // /**EX3  */
// // // function CivilPlane(props) {
// // //    this.numberOfSeats = props.numberOfSeats;
// // // };
// // // CivilPlane.prototype.seatsInfo = function() {
// // //   console.log(this);
// // //   console.log();
// // //     console.log(`Number of seats in the plane is ${this.numberOfSeats}`);
// // // };
// // // CivilPlane.prototype.modifySeatsNymber = function(newSeatsQty) {
// // //   this.numberOfSeats = newSeatsQty;
// // // };
// // // const propsForSmallPLane = { numberOfSeats: 4 };
// // // const smallPlane = new CivilPlane(propsForSmallPLane);
// // // const propsForLargePlane = {  numberOfSeats: 250};
// // // const largePlane = new CivilPlane(propsForLargePlane);
// // // smallPlane.seatsInfo();
// // // smallPlane.modifySeatsNymber(10);

// // /**EX4 */
// // // const Parent = {
// // //   type: "Parent",
// // //   typeInfo() {
// // //     console.log(`Hello from ${this.type}`);
// // //   },
// // //   modifyType(newType) {
// // //     this.type = newType

// // //   }
// // // }
// // // console.log(Parent.type);
// // // Parent.typeInfo();
// // // console.log(Parent.prototype);
// // // const child = Object.create(Parent);
// // // console.log(child.__proto__ === Parent);
// // // child.type = "CHild";
// // // child.typeInfo()
// // // child.modifyType("Modified Child");
// // // console.log(child.type);
// // // child.typeInfo()

// // // /**EX5 prototype chain */
// // function Airplane(props) {
// //   this.wingspan = props.wingspan;
// //   this.maxRangeOfFlight = props.maxRangeOfFlight;
// // }
// // Airplane.prototype.airplaneInfo = function() {
// //   console.log(`Wingspan of airplane is ${this.wingspan} and max range is ${this.maxRangeOfFlight}`);
// // }
// // function CivilPlane(props) {
// //   Airplane.call(this, props);
// //    this.numberOfSeats = props.numberOfSeats;
// // };
// // CivilPlane.prototype = Object.create(Airplane.prototype);
// // // console.log(CivilPlane.prototype.__proto__ === Airplane.prototype);
// // // console.log(CivilPlane.prototype.constructor === CivilPlane);
// // CivilPlane.prototype.constructor = CivilPlane;
// // CivilPlane.prototype.seatsInfo = function() {
// //   // console.log(this);
// //   // console.log();
// //   //   console.log(`Number of seats in the plane is ${this.numberOfSeats}`);
// // };
// // CivilPlane.prototype.modifySeatsNymber = function(newSeatsQty) {
// //   this.numberOfSeats = newSeatsQty;
// // };
// // const propsForSmallPLane = { numberOfSeats: 4,
// //                               wingspan: 20,
// //                             maxRangeOfFlight: 1000
// //                           };
// // const smallPlane = new CivilPlane(propsForSmallPLane);
// // const propsForLargePlane = {  numberOfSeats: 250,
// //                                wingspan: 60,
// //                                maxRangeOfFlight: 3500
// //                               };
// // const largePlane = new CivilPlane(propsForLargePlane);
// // smallPlane.seatsInfo();
// // smallPlane.modifySeatsNymber(10);



// String.prototype.toAlternatingCase = function () {
//   var string = this;
//   console.log(string.toAlternatingCase);
//   // for (let i = 0; i< string.length; i++){
//   //   if (string[i] == string[i].toUpperCase()) {string[i].toLowerCase()} 
//   //    else {string[i].toUpperCase()}
//   //    }
//   return string;
    
//   //   let array = this.split();
//   //   var newArray = array.map(function(x){x.toLowerCase()
//   // //     if (x == x.toUpperCase()) {string[i].toLowerCase()} 
//   // //      else {x.toLowerCase();}
//   //   return newArray.toString()
//   //     }
//   //   );
         
//   }
// // var String = function(){};
// var words = "hello world";
// // String.prototype.toAlternatingCase = function () {
// //   // let array = this.split();
// //   console.log(this);
// //   // var newArray = array.map(function(character){
// //   //   if (character == character.toUpperCase()) { character.toLowerCase()} 
// //   //    else { character.toLowerCase();}
// //   //   };
// //   // );
// //   // return newArray.toString()
// // };

// // words.prototype.toAlternatingCase();
//   String.prototype.toAlternatingCase();
 
  
//       Test.assertEquals("hello world".toAlternatingCase(), "HELLO WORLD");
//       Test.assertEquals("HELLO WORLD".toAlternatingCase(), "hello world");
//       Test.assertEquals("hello WORLD".toAlternatingCase(), "HELLO world");
//       Test.assertEquals("HeLLo WoRLD".toAlternatingCase(), "hEllO wOrld");
//       Test.assertEquals("12345".toAlternatingCase(), "12345");
//       Test.assertEquals("1a2b3c4d5e".toAlternatingCase(), "1A2B3C4D5E");
//       Test.assertEquals("String.prototype.toAlternatingCase".toAlternatingCase(), "sTRING.PROTOTYPE.TOaLTERNATINGcASE");
//       Test.assertEquals("Hello World".toAlternatingCase().toAlternatingCase(), "Hello World");

// CLASSES ************************************************************* //

/** EX1 Class declaration */
// class MyClass {
// }
// const firstInstance = new MyClass();
// console.log(firstInstance);
// console.log(firstInstance.__proto__ === MyClass.prototype); //true
// console.log(MyClass.prototype.constructor === MyClass); //true
// console.log(MyClass.prototype.__proto__ === Object.prototype);

/** EX2 Hoisting */
// const firstInstance = new MyClass(); //acces only after declaration
// class MyClass {
// }

/** EX3 Class Expression */
// const MyClass = class {};
// const firstInstance = new MyClass();
// console.log(firstInstance);
// console.log(firstInstance.__proto__ === MyClass.prototype);


/** EX4 Constructor method in class */
// class ComputerMouse {
//   constructor(props){
//     this.type = props.type;
//     this.color = props.color;
//     this.interface = props.interface;
//   }
// };
// const propsForWirlessMouse = {
//   type: "Wirless",
//   color: "white",
//   interface: "Bloretooth"
// };
// const wirlessMouse = new ComputerMouse(propsForWirlessMouse);
// console.log(propsForWirlessMouse);

/** EX5 Class is not object and its methodes are not short hand */
// class ComputerMouse {
//   constructor: function(props){ //Uncaught SyntaxError: Unexpected identifier
//     this.type = props.type;
//     this.color = props.color;
//     this.interface = props.interface;
//   }
// };
// //CORRECT SYNTAX
// class ComputerMouse{
//   constructor(){}
//   method1(){}
//   method2(props){}
// }

/**EX6 Default values for properties */
// class ComputerMouse {
//   constructor(props){
//     this.type = props.type || "Computer";
//     this.color = props.color;
//     this.interface = props.interface !== undefined
//     ? props.interface
//     : "Not specified"
//   }
// };
// const propsForWirlessMouse = {
//   type: "Wirless",
//   color: "white",
//   interface: "Bloretooth"
// };
// const wirlessMouse = new ComputerMouse(propsForWirlessMouse);
// const propsForGenercMouse = {
//   color: "red",
//   type: "",
// };
// const genericMouse = new ComputerMouse(propsForGenercMouse)
// console.log(propsForWirlessMouse);
// console.log(genericMouse);

/**EX7 Class methodes */
// class ComputerMouse {
//     constructor(props){
//       this.type = props.type;
//       this.color = props.color;
//       this.interface = props.interface;
//     } //, comma nof allowed

//     mouseInfo(){
//       console.log(`Type of the mouse is ${this.type} and color is ${this.color}`)
//     }

//     changeMouseType(newType){
//       this.type = newType

//     }
//   };
//   const propsForWirlessMouse = {
//     type: "Wirless",
//     color: "white",
//     interface: "Bloretooth"
//   };
//   const wirlessMouse = new ComputerMouse(propsForWirlessMouse);
//   console.log(wirlessMouse);
//   wirlessMouse.mouseInfo(); //Type of the mouse is Wirless and color is white
//   wirlessMouse.changeMouseType("USB");
//   console.log(wirlessMouse);
//   wirlessMouse.mouseInfo(); //Type of the mouse is USB and color is white

/** EX8 Class extension(add new class to prototype chain)*/
// class ComputerAccesiories {
//   constructor(props) {
//     this.compatibility = props.compatibility || ["PC", "Mac"];
//   }
// }
// // class ComputerMouse extends ComputerAccesiories{};//COnstructor of acessories will be addet autom
// // default behaviour if constructor is absent
// class ComputerMouse extends ComputerAccesiories{
//   constructor(...allProps) { //rest operator - give array
//     console.log(allProps);
//     super(...allProps)//spread operator - spread to separate elements
//   }
// };
// const myMouse = new ComputerMouse({
//   compatibility: ["Mac"]
// });
// console.log(myMouse);

/** EX9 - set properties in differenc clsess */
// class ComputerAccesiories {
//   constructor(props) {
//     this.compatibility = props.compatibility || ["PC", "Mac"];
//   }
// }
//super must be present in the constructor -Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor
// class ComputerMouse extends ComputerAccesiories{
//   constructor(props){
//     this.type = props.type;
//   }
// };
//super() is called without arbuments  -Uncaught TypeError: Cannot read property 'compatibility' of undefined
// class ComputerMouse extends ComputerAccesiories{
//   constructor(props){
//     super(),
//     this.type = props.type;
//   }
// };
// class ComputerMouse extends ComputerAccesiories{
//   constructor(props){
//     super(props),
//     this.type = props.type;
//   }
// };
// const myMouse = new ComputerMouse({
//   compatibility: ["Mac"],
//   type: "Optical"
// });
// console.log(myMouse);

/** EX10 */
// class ComputerAccesiories {
//   constructor(props) {
//     this.compatibility = props.compatibility || ["PC", "Mac"];
//   }

//   compatibilityInfo() {
//     this.compatibility.forEach(el => console.log(`Accesories is compatible witch ${el}`));
//   }
// }
// class ComputerMouse extends ComputerAccesiories{
//   constructor(props){
//     super(props),
//     this.type = props.type;
//   }

//   mouseInfo() {
//     console.log(`Type of the mouse is ${this.type}`)
//   }
// };
// const myMouse = new ComputerMouse({
//   compatibility: ["Mac", "Tablet"],
//   type: "Bloototh"
// });
// console.log(myMouse);
// myMouse.compatibilityInfo();
// myMouse.mouseInfo();

/**EX11 Type of and instance of in classes */
// class ComputerAccesiories {
//   constructor(props) {
//     this.compatibility = props.compatibility || ["PC", "Mac"];
//   }

//   compatibilityInfo() {
//     this.compatibility.forEach(el => console.log(`Accesories is compatible witch ${el}`));
//   }
// }
// class ComputerMouse extends ComputerAccesiories{
//   constructor(props){
//     super(props),
//     this.type = props.type;
//   }

//   mouseInfo() {
//     console.log(`Type of the mouse is ${this.type}`)
//   }
// };
// const myMouse = new ComputerMouse({
//   compatibility: ["Mac", "Tablet"],
//   type: "Bloototh"
// });
// console.log(typeof ComputerMouse)
// console.log(myMouse instanceof ComputerMouse);
// console.log(myMouse instanceof ComputerAccesiories);
// console.log(myMouse instanceof Object);
// console.log(typeof ComputerMouse.prototype);
// console.log(typeof ComputerMouse.prototype.constructor);
// console.log(ComputerMouse.prototype.constructor === ComputerMouse);

/** EX12 static methods */
// class ComputerMouse {
//   constructor(props){
//     this.type = props.type;
//   }

//   static ownClass() {
//     console.log("This calss sets props mouse")
//   }

//   mouseInfo() {
//     console.log(`Type of the mouse is ${this.type}`)
//   }
// };
// const myMouse = new ComputerMouse({type: "Gaming"})
// console.log(myMouse);
// myMouse.mouseInfo();
// // myMouse.ownClass(); //Uncaught TypeError: myMouse.ownClass is not a function
// ComputerMouse.ownClass(); //static methods can be called directly from class

/**
 * CHALLENGE 7-3: TASK
 *
 * Convert all function constructors to ES6 Classes keeping same functionality
 */

// class Product {
//     constructor({price}){
//       this.price = price;
//     }

//       priceInfo() {
//         console.log(`Price of the product is ${this.price}`);
//     }
// }
// class ElectricDevice extends Product{
//   constructor(props){
//     super(props),
//     this.energyEfficiencyClass = props.energyEfficiencyClass;
//   }
//   energyInfo(){console.log(`Energy Efficiency Class is ${this.energyEfficiencyClass}`);}
// };
// class TV extends ElectricDevice{
//   constructor(props){
//     super(props),
//     this.model = props.model;
//     this.diagonal = props.diagonal;
//   }
// }

// //  function Product(props) {this.price = props.price;}
// // Product.prototype.priceInfo = function() {console.log(`Price of the product is ${this.price}`);};
// // function ElectricDevice(props) {Product.call(this, props);
// //   this.energyEfficiencyClass = props.energyEfficiencyClass;}
// // ElectricDevice.prototype = Object.create(Product.prototype);
// // ElectricDevice.prototype.constructor = ElectricDevice;
// // ElectricDevice.prototype.energyInfo = function() {
// //   console.log(
// //     `Energy Efficiency Class is ${
// //       this.energyEfficiencyClass
// //     }`
// //   );
// // };
// // function TV(props) {
// //   ElectricDevice.call(this, props);
// //   this.model = props.model;
// //   this.diagonal = props.diagonal;
// // }
// // TV.prototype = Object.create(ElectricDevice.prototype);
// // TV.prototype.constructor = TV;

// const propsForMyTv = {
//   model: "A1620",
//   price: 1200,
//   energyEfficiencyClass: "A+",
//   diagonal: 42
// };

// const myTV = new TV(propsForMyTv);

// /**
//  * VERIFICATION
//  */
// console.log(myTV);
// /* {
//   model: "A1620",
//   price: 1200,
//   energyEfficiencyClass: "A+",
//   diagonal: 42,
//   __proto__: ...
// } */

// myTV.energyInfo(); // "Energy Efficiency Class is A+"

// myTV.priceInfo(); // Price of the product is 1200

// myTV instanceof TV; // true
// myTV instanceof ElectricDevice; // true
// myTV instanceof Product; // true
// myTV instanceof Object; // true


/**
 * CHALLENGE 7-4: TASK
 *
 * Create new class "ExtendedArray" that should extend built-in "Array".
 *
 * Add two custom methods to the new class:
 * 1. "sum" - it should return sum of all elements in the array
 * 2. "onlyNumbers" - it should return new array that will contain only numbers from the source array
 *
 * Create several instances of the new "ExtendedArray" class and test both methods "sum" and "onlyNumbers"
 */
// class ExtendedArray extends Array {
//     sum(){
//         return this.reduce((a, b) => a + b);
//     }
//     onlyNumbers(){
//         return this.filter(a => typeof a === "number");
//         // const numbers = this.match(/[0-9]+/g);
//         // return numbers;
//     }
// }
// const firstInstance = new ExtendedArray(2, 3, 4, 53, "b")
// console.log(firstInstance.sum());
// console.log(firstInstance.onlyNumbers());
// firstInstance.push("asbd");
// console.log(firstInstance);
// console.log(firstInstance instanceof ExtendedArray) //true
// console.log(firstInstance instanceof Array) //true
// const secondInstance = new ExtendedArray(true, "", null, 2, 10)
// console.log(secondInstance.onlyNumbers())

/**
 * CHALLENGE 7-5: TASK
 *
 * Create new class "CustomArray" that should extend built-in "Array".
 *
 * Add one custom method "push" to the new class.
 * This method will have one parameter "newElement".
 *
 * It should perform following actions:
 * 1. Add new element to the existing array
 * (don't use "push" method for this)
 * 2. Modify "length" property of the array (increment it)
 * 3. Log following line to the console:
 * "New element <ELEMENT> was just added to the array"
 *
 * Create instance of the new "CustomArray" class and test new method "push" and compare it with "push"
 *
 * What will happen if name of the custom method in the "CustomArray" class will be also "push" instead of "push"?
 * Try this.
 */
// class CustomArray extends Array {
//     push(newElement) {
//         console.log(`Initial length is ${this.length}`);
//         this[this.length] = newElement;
//         console.log(`Updated length is ${this.length}`);
//         console.log(`New element ${newElement} was just added to the array`)
//     }
// }
// const firstInstance = new CustomArray();
// firstInstance.push(1);
// console.log(firstInstance)
// firstInstance.push(15);
// console.log(firstInstance)
